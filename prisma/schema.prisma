// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                  String        @id @default(cuid())
    name                String?
    email               String?       @unique
    emailVerified       DateTime?
    image               String?
    accounts            Account[]
    sessions            Session[]
    generationCounter   Int?          @default(0)
    isFreemiumAvailable Boolean?      @default(true)
    stripeCustomerId    String?
    stripePaymentId     String?
    payments            Payment[]
    generations         Generations[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Payment {
    id            String   @id @default(cuid())
    stripeId      String
    status        String
    totalPaid     Float
    currency      String
    paymentMethod String
    createdAt     DateTime @default(now())
    customerName  String
    userId        String?
    User          User?    @relation(fields: [userId], references: [id])

    @@map("payments")
}

model Generations {
    id               String   @id @default(cuid())
    prompt           String
    replicateId      String?
    status           String?
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt
    userId           String?
    outputUrl        String?
    originalImageUrl String?
    bookmarked       Boolean? @default(false)
    blurhash         String?
    hdOutputUrl      String?
    User             User?    @relation(fields: [userId], references: [id])
    isPublic         Boolean? @default(false)
}
