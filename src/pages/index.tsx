import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";
import { api } from "~/utils/api";
import getStripe from "~/server/stripe/client";
import { fetchPostJSON } from "~/utils/stripe";
import { useRouter } from "next/router";
import { env } from "~/env.mjs";

const Home: NextPage = () => {
  const hello = api.example.hello.useQuery({ text: "from tRPC" });

  const { data: remainigGenerations, isLoading } =
    api.stripe.availableGenerations.useQuery();

  const ctx = api.useContext();
  const insertFake = api.stripe.insertOneFakeGeneration.useMutation({
    async onSuccess() {
      await ctx.stripe.availableGenerations.invalidate();
    },
  });

  // TODO: Vlad how do you want to process payments?
  // We can do two things:
  // 1) we wait for the call back and then on a page-in-the-middle when the stripe sends the user to us, with a "payment-id" we verify here and insert the payment...
  // 2) we do it with a "hook" that actually stripe will call us server-to-server and THERE we insert the payment
  const { data: sessionData } = useSession();
  const router = useRouter();
  const stripeSessionId = `${router.query?.session_id ?? ""}`;
  const { data: stripeData } = api.stripe.getStripePayment.useQuery(
    { paymentId: stripeSessionId },
    { enabled: sessionData !== null && stripeSessionId !== "" }
  );

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Create <span className="text-[hsl(280,100%,70%)]">T3</span> App
          </h1>
          <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:gap-8">
            <Link
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
              href="https://create.t3.gg/en/usage/first-steps"
              target="_blank"
            >
              <h3 className="text-2xl font-bold">First Steps →</h3>
              <div className="text-lg">
                Just the basics - Everything you need to know to set up your
                database and authentication.
              </div>
            </Link>
            <Link
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
              href="https://create.t3.gg/en/introduction"
              target="_blank"
            >
              <h3 className="text-2xl font-bold">Documentation →</h3>
              <div className="text-lg">
                Learn more about Create T3 App, the libraries it uses, and how
                to deploy it.
              </div>
            </Link>
          </div>
          <div className="flex flex-col items-center gap-2">
            <p className="text-2xl text-white">
              {hello.data ? hello.data.greeting : "Loading tRPC query..."}
            </p>
            <AuthShowcase />

            {!isLoading && (
              <PaymentButton remainigGenerations={remainigGenerations ?? 0} />
            )}

            {(remainigGenerations ?? 0) > 0 && (
              <form
                onSubmit={async (e) => {
                  e.preventDefault();
                  try {
                    await insertFake.mutateAsync();
                  } catch (cause) {
                    console.error({ cause }, "Failed to generate a fake one");
                  }
                }}
              >
                <button
                  type="submit"
                  className="rounded-3xl bg-red-900 px-3 py-2 font-bold text-white"
                  disabled={insertFake.isLoading}
                >
                  Insert one fake generation
                </button>
                {insertFake.error && (
                  <p style={{ color: "red" }}>{insertFake.error.message}</p>
                )}
              </form>
            )}

            {stripeData && (
              <pre className="block bg-white">{JSON.stringify(stripeData)}</pre>
            )}
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user.email?.split('',4)}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};

export const PaymentButton = ({
  remainigGenerations,
}: {
  remainigGenerations: number;
}) => {
  const router = useRouter();
  const stripeSessionId = `${router.query?.session_id ?? ""}`;
  const { data: sessionData } = useSession();

  const startCheckout = async () => {
    const response = await fetchPostJSON("/api/checkout_sessions");

    if (response.statusCode === 500) {
      console.error("startCheckout Error: ", response.message);
      return;
    }

    const stripe = await getStripe();
    const { error } = await stripe!.redirectToCheckout({
      sessionId: response.id,
    });
    console.warn(error.message);
  };
  const generationsPerPackage = env.NEXT_PUBLIC_GENERATIONS_COUNT_PER_PURCHASE;
  const costPerPackage = env.NEXT_PUBLIC_GENERATIONS_PACKAGE_COST;

  return (
    <div>
      {remainigGenerations !== undefined && (
        <div>
          {remainigGenerations > 0 && (
            <div className="flex flex-col gap-3">
              <div
                role="alert"
                className="w-full rounded-lg border bg-blue-300 p-4"
              >
                <h5 className="mb-1 font-bold leading-none tracking-tight">
                  Heads up!
                </h5>
                <div className="text-sm leading-relaxed">
                  You have <strong>{remainigGenerations}</strong> generations remaining
                </div>
              </div>
            </div>
          )}
          {remainigGenerations === 0 && sessionData && (
            <button
              className="rounded-2xl bg-orange-900 px-3 py-2 text-white"
              onClick={() => startCheckout()}
            >
              Buy {generationsPerPackage} generations for ${costPerPackage}
            </button>
          )}
        </div>
      )}
    </div>
  );
};
